### YamlMime:ManagedReference
items:
- uid: PdfBuilder.Pdf
  commentId: T:PdfBuilder.Pdf
  id: Pdf
  parent: PdfBuilder
  children:
  - PdfBuilder.Pdf.#ctor(iTextSharp.text.Rectangle)
  - PdfBuilder.Pdf.Add``1(PdfBuilder.Builder{``0})
  - PdfBuilder.Pdf.Count
  - PdfBuilder.Pdf.Dispose
  - PdfBuilder.Pdf.Dispose(System.Boolean)
  - PdfBuilder.Pdf.Render(PdfBuilder.Interfaces.IPdfRenderer,System.IO.Stream)
  - PdfBuilder.Pdf.Render(System.IO.Stream)
  - PdfBuilder.Pdf.RenderHtml(System.String,System.IO.Stream)
  - PdfBuilder.Pdf.Save(PdfBuilder.Interfaces.IPdfRenderer,System.String)
  - PdfBuilder.Pdf.Save(System.String)
  - PdfBuilder.Pdf.Set(System.Action{iTextSharp.text.Document})
  - PdfBuilder.Pdf.ToArray
  langs:
  - csharp
  - vb
  name: Pdf
  nameWithType: Pdf
  fullName: PdfBuilder.Pdf
  type: Class
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Pdf
    path: Pdf.cs
    startLine: 17
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nThe business part for creating a PDF. This class will handle all the underlying iTextSharp functions\n"
  example: []
  syntax:
    content: 'public class Pdf : Builder<Document>, IDisposable'
    content.vb: >-
      Public Class Pdf
          Inherits Builder(Of Document)
          Implements IDisposable
  inheritance:
  - System.Object
  - PdfBuilder.Builder{iTextSharp.text.Document}
  implements:
  - System.IDisposable
  inheritedMembers:
  - PdfBuilder.Builder{iTextSharp.text.Document}.Instance
  - PdfBuilder.Builder{iTextSharp.text.Document}.ReadProperty``1(System.Func{iTextSharp.text.Document,{TResult}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PdfBuilder.Pdf.Count
  commentId: P:PdfBuilder.Pdf.Count
  id: Count
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: Pdf.Count
  fullName: PdfBuilder.Pdf.Count
  type: Property
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Count
    path: Pdf.cs
    startLine: 26
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nThe number of elements contained in the PDF instance\n"
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: PdfBuilder.Pdf.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: PdfBuilder.Pdf.#ctor(iTextSharp.text.Rectangle)
  commentId: M:PdfBuilder.Pdf.#ctor(iTextSharp.text.Rectangle)
  id: '#ctor(iTextSharp.text.Rectangle)'
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Pdf(Rectangle)
  nameWithType: Pdf.Pdf(Rectangle)
  fullName: PdfBuilder.Pdf.Pdf(iTextSharp.text.Rectangle)
  type: Constructor
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: .ctor
    path: Pdf.cs
    startLine: 36
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nInstantiates a PdfBuilder instance from a page size\n"
  example: []
  syntax:
    content: public Pdf(Rectangle pageSize)
    parameters:
    - id: pageSize
      type: iTextSharp.text.Rectangle
      description: Rectangle that gives the size of page<xref href="iTextSharp.text.Rectangle" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(pageSize As Rectangle)
  overload: PdfBuilder.Pdf.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.Set(System.Action{iTextSharp.text.Document})
  commentId: M:PdfBuilder.Pdf.Set(System.Action{iTextSharp.text.Document})
  id: Set(System.Action{iTextSharp.text.Document})
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Set(Action<Document>)
  nameWithType: Pdf.Set(Action<Document>)
  fullName: PdfBuilder.Pdf.Set(System.Action<iTextSharp.text.Document>)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Set
    path: Pdf.cs
    startLine: 58
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nExecute an action on the underlying Document instance\n"
  example:
  - "\n<pre><code>To set properties or perform actions:\n\nvar pdf = new Pdf(PageSize.A4);\npdf.Set(p =>\n    {\n        p.Add; // The font size for the paragraph has been set to 12\n    });</code></pre>\n"
  syntax:
    content: public Pdf Set(Action<Document> cb)
    parameters:
    - id: cb
      type: System.Action{iTextSharp.text.Document}
      description: Callback to execute to set properties of the underlying document <xref href="System.Action%601" data-throw-if-not-resolved="false"></xref>
    return:
      type: PdfBuilder.Pdf
      description: <xref href="PdfBuilder.Pdf" data-throw-if-not-resolved="false"></xref> instance
    content.vb: Public Function Set(cb As Action(Of Document)) As Pdf
  overload: PdfBuilder.Pdf.Set*
  nameWithType.vb: Pdf.Set(Action(Of Document))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PdfBuilder.Pdf.Set(System.Action(Of iTextSharp.text.Document))
  name.vb: Set(Action(Of Document))
- uid: PdfBuilder.Pdf.Add``1(PdfBuilder.Builder{``0})
  commentId: M:PdfBuilder.Pdf.Add``1(PdfBuilder.Builder{``0})
  id: Add``1(PdfBuilder.Builder{``0})
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Add<T>(Builder<T>)
  nameWithType: Pdf.Add<T>(Builder<T>)
  fullName: PdfBuilder.Pdf.Add<T>(PdfBuilder.Builder<T>)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Add
    path: Pdf.cs
    startLine: 68
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nAdds an builder element to the document\n"
  example: []
  syntax:
    content: public Pdf Add<T>(Builder<T> builder)
    parameters:
    - id: builder
      type: PdfBuilder.Builder{{T}}
      description: <xref href="PdfBuilder.Builder%601" data-throw-if-not-resolved="false"></xref>An instance of a Builder object
    typeParameters:
    - id: T
    return:
      type: PdfBuilder.Pdf
    content.vb: Public Function Add(Of T)(builder As Builder(Of T)) As Pdf
  overload: PdfBuilder.Pdf.Add*
  nameWithType.vb: Pdf.Add(Of T)(Builder(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PdfBuilder.Pdf.Add(Of T)(PdfBuilder.Builder(Of T))
  name.vb: Add(Of T)(Builder(Of T))
- uid: PdfBuilder.Pdf.Render(PdfBuilder.Interfaces.IPdfRenderer,System.IO.Stream)
  commentId: M:PdfBuilder.Pdf.Render(PdfBuilder.Interfaces.IPdfRenderer,System.IO.Stream)
  id: Render(PdfBuilder.Interfaces.IPdfRenderer,System.IO.Stream)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Render(IPdfRenderer, Stream)
  nameWithType: Pdf.Render(IPdfRenderer, Stream)
  fullName: PdfBuilder.Pdf.Render(PdfBuilder.Interfaces.IPdfRenderer, System.IO.Stream)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Render
    path: Pdf.cs
    startLine: 79
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nRenders content on the page using a renderer instance to a given stream\n"
  example: []
  syntax:
    content: public void Render(IPdfRenderer renderer, Stream stream)
    parameters:
    - id: renderer
      type: PdfBuilder.Interfaces.IPdfRenderer
      description: Instance of object that implements a IPdfRenderer interface<xref href="PdfBuilder.Interfaces.IPdfRenderer" data-throw-if-not-resolved="false"></xref>
    - id: stream
      type: System.IO.Stream
      description: Stream instance used to write pdf text to <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Render(renderer As IPdfRenderer, stream As Stream)
  overload: PdfBuilder.Pdf.Render*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.Save(PdfBuilder.Interfaces.IPdfRenderer,System.String)
  commentId: M:PdfBuilder.Pdf.Save(PdfBuilder.Interfaces.IPdfRenderer,System.String)
  id: Save(PdfBuilder.Interfaces.IPdfRenderer,System.String)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Save(IPdfRenderer, String)
  nameWithType: Pdf.Save(IPdfRenderer, String)
  fullName: PdfBuilder.Pdf.Save(PdfBuilder.Interfaces.IPdfRenderer, System.String)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Save
    path: Pdf.cs
    startLine: 90
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nSaves content on the page rendered by a renderer instance to a given file\n"
  example: []
  syntax:
    content: public void Save(IPdfRenderer renderer, string fileName)
    parameters:
    - id: renderer
      type: PdfBuilder.Interfaces.IPdfRenderer
      description: 'Instance of object that implements a IPdfRenderer interface<xref href="PdfBuilder.Interfaces.IPdfRenderer" data-throw-if-not-resolved="false"></xref> '
    - id: fileName
      type: System.String
      description: The name of the file to write PDF content to<xref href="System.String" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Save(renderer As IPdfRenderer, fileName As String)
  overload: PdfBuilder.Pdf.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.RenderHtml(System.String,System.IO.Stream)
  commentId: M:PdfBuilder.Pdf.RenderHtml(System.String,System.IO.Stream)
  id: RenderHtml(System.String,System.IO.Stream)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: RenderHtml(String, Stream)
  nameWithType: Pdf.RenderHtml(String, Stream)
  fullName: PdfBuilder.Pdf.RenderHtml(System.String, System.IO.Stream)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: RenderHtml
    path: Pdf.cs
    startLine: 103
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nRenders HTML content on the page\n"
  example: []
  syntax:
    content: public void RenderHtml(string html, Stream stream)
    parameters:
    - id: html
      type: System.String
      description: HTML content as <xref href="System.String" data-throw-if-not-resolved="false"></xref>
    - id: stream
      type: System.IO.Stream
      description: Stream instance used to write HTML text to <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub RenderHtml(html As String, stream As Stream)
  overload: PdfBuilder.Pdf.RenderHtml*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.Render(System.IO.Stream)
  commentId: M:PdfBuilder.Pdf.Render(System.IO.Stream)
  id: Render(System.IO.Stream)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Render(Stream)
  nameWithType: Pdf.Render(Stream)
  fullName: PdfBuilder.Pdf.Render(System.IO.Stream)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Render
    path: Pdf.cs
    startLine: 120
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nRenders the added elements to a stream\n"
  example: []
  syntax:
    content: public void Render(Stream stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: Stream instance used to write elements to <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Render(stream As Stream)
  overload: PdfBuilder.Pdf.Render*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.ToArray
  commentId: M:PdfBuilder.Pdf.ToArray
  id: ToArray
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: Pdf.ToArray()
  fullName: PdfBuilder.Pdf.ToArray()
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: ToArray
    path: Pdf.cs
    startLine: 137
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nRenders the PDF document to a byte array\n"
  example: []
  syntax:
    content: public byte[] ToArray()
    return:
      type: System.Byte[]
      description: <xref href="System.Byte" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Function ToArray As Byte()
  overload: PdfBuilder.Pdf.ToArray*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.Save(System.String)
  commentId: M:PdfBuilder.Pdf.Save(System.String)
  id: Save(System.String)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Save(String)
  nameWithType: Pdf.Save(String)
  fullName: PdfBuilder.Pdf.Save(System.String)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Save
    path: Pdf.cs
    startLine: 164
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nSaves the PDF document to a given file\n"
  example:
  - "\n<pre><code>To write to current directory:\npdf.Save(&quot;myPdf.pdf&quot;);\n\nTo write to another directory, give its absolute path:\npdf.Save(&quot;C:\\\\MyDocs\\\\myPdf.pdf&quot;) // Note the escapes!\n\nYou can also write using string literal:\npdf.Save(@&quot;C:\\MyDocs\\myPdf.pdf&quot;) //Note the @ symbol</code></pre>\n"
  syntax:
    content: public void Save(string fileName)
    parameters:
    - id: fileName
      type: System.String
      description: The name of the file to write PDF content to <xref href="System.String" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub Save(fileName As String)
  overload: PdfBuilder.Pdf.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: PdfBuilder.Pdf.Dispose(System.Boolean)
  commentId: M:PdfBuilder.Pdf.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Pdf.Dispose(Boolean)
  fullName: PdfBuilder.Pdf.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Dispose
    path: Pdf.cs
    startLine: 179
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nDisposes the underlying document object\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    parameters:
    - id: disposing
      type: System.Boolean
      description: boolean to represent if the document object has been disposed <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref>
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
  overload: PdfBuilder.Pdf.Dispose*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: PdfBuilder.Pdf.Dispose
  commentId: M:PdfBuilder.Pdf.Dispose
  id: Dispose
  parent: PdfBuilder.Pdf
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Pdf.Dispose()
  fullName: PdfBuilder.Pdf.Dispose()
  type: Method
  source:
    remote:
      path: PdfBuilder/Pdf.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: Dispose
    path: Pdf.cs
    startLine: 195
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nThe dispose method to call\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  overload: PdfBuilder.Pdf.Dispose*
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PdfBuilder
  commentId: N:PdfBuilder
  isExternal: false
  name: PdfBuilder
  nameWithType: PdfBuilder
  fullName: PdfBuilder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PdfBuilder.Builder{iTextSharp.text.Document}
  commentId: T:PdfBuilder.Builder{iTextSharp.text.Document}
  parent: PdfBuilder
  definition: PdfBuilder.Builder`1
  name: Builder<Document>
  nameWithType: Builder<Document>
  fullName: PdfBuilder.Builder<iTextSharp.text.Document>
  nameWithType.vb: Builder(Of Document)
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Document)
  name.vb: Builder(Of Document)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: PdfBuilder.Builder{iTextSharp.text.Document}.Instance
  commentId: P:PdfBuilder.Builder{iTextSharp.text.Document}.Instance
  parent: PdfBuilder.Builder{iTextSharp.text.Document}
  definition: PdfBuilder.Builder`1.Instance
  name: Instance
  nameWithType: Builder<Document>.Instance
  fullName: PdfBuilder.Builder<iTextSharp.text.Document>.Instance
  nameWithType.vb: Builder(Of Document).Instance
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Document).Instance
- uid: PdfBuilder.Builder{iTextSharp.text.Document}.ReadProperty``1(System.Func{iTextSharp.text.Document,{TResult}})
  commentId: M:PdfBuilder.Builder{iTextSharp.text.Document}.ReadProperty``1(System.Func{iTextSharp.text.Document,``0})
  parent: PdfBuilder.Builder{iTextSharp.text.Document}
  definition: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  name: ReadProperty<TResult>(Func<Document, TResult>)
  nameWithType: Builder<Document>.ReadProperty<TResult>(Func<Document, TResult>)
  fullName: PdfBuilder.Builder<iTextSharp.text.Document>.ReadProperty<TResult>(System.Func<iTextSharp.text.Document, TResult>)
  nameWithType.vb: Builder(Of Document).ReadProperty(Of TResult)(Func(Of Document, TResult))
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Document).ReadProperty(Of TResult)(System.Func(Of iTextSharp.text.Document, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of Document, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<Document>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<iTextSharp.text.Document>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of Document).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of iTextSharp.text.Document).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: PdfBuilder.Builder`1
  commentId: T:PdfBuilder.Builder`1
  parent: PdfBuilder
  isExternal: false
  name: Builder<T>
  nameWithType: Builder<T>
  fullName: PdfBuilder.Builder<T>
  nameWithType.vb: Builder(Of T)
  fullName.vb: PdfBuilder.Builder(Of T)
  name.vb: Builder(Of T)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder`1.Instance
  commentId: P:PdfBuilder.Builder`1.Instance
  isExternal: false
  name: Instance
  nameWithType: Builder<T>.Instance
  fullName: PdfBuilder.Builder<T>.Instance
  nameWithType.vb: Builder(Of T).Instance
  fullName.vb: PdfBuilder.Builder(Of T).Instance
- uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  commentId: M:PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  isExternal: true
  name: ReadProperty<TResult>(Func<T, TResult>)
  nameWithType: Builder<T>.ReadProperty<TResult>(Func<T, TResult>)
  fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>(System.Func<T, TResult>)
  nameWithType.vb: Builder(Of T).ReadProperty(Of TResult)(Func(Of T, TResult))
  fullName.vb: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)(System.Func(Of T, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<T>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of T).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Pdf.Count*
  commentId: Overload:PdfBuilder.Pdf.Count
  isExternal: false
  name: Count
  nameWithType: Pdf.Count
  fullName: PdfBuilder.Pdf.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: iTextSharp.text.Rectangle
  commentId: T:iTextSharp.text.Rectangle
  parent: iTextSharp.text
  isExternal: true
  name: Rectangle
  nameWithType: Rectangle
  fullName: iTextSharp.text.Rectangle
- uid: PdfBuilder.Pdf.#ctor*
  commentId: Overload:PdfBuilder.Pdf.#ctor
  isExternal: false
  name: Pdf
  nameWithType: Pdf.Pdf
  fullName: PdfBuilder.Pdf.Pdf
- uid: iTextSharp.text
  commentId: N:iTextSharp.text
  isExternal: false
  name: iTextSharp.text
  nameWithType: iTextSharp.text
  fullName: iTextSharp.text
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Pdf
  commentId: T:PdfBuilder.Pdf
  parent: PdfBuilder
  isExternal: false
  name: Pdf
  nameWithType: Pdf
  fullName: PdfBuilder.Pdf
- uid: PdfBuilder.Pdf.Set*
  commentId: Overload:PdfBuilder.Pdf.Set
  isExternal: false
  name: Set
  nameWithType: Pdf.Set
  fullName: PdfBuilder.Pdf.Set
- uid: System.Action{iTextSharp.text.Document}
  commentId: T:System.Action{iTextSharp.text.Document}
  parent: System
  definition: System.Action`1
  name: Action<Document>
  nameWithType: Action<Document>
  fullName: System.Action<iTextSharp.text.Document>
  nameWithType.vb: Action(Of Document)
  fullName.vb: System.Action(Of iTextSharp.text.Document)
  name.vb: Action(Of Document)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Document
    name: Document
    nameWithType: Document
    fullName: iTextSharp.text.Document
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Pdf.Add*
  commentId: Overload:PdfBuilder.Pdf.Add
  isExternal: false
  name: Add
  nameWithType: Pdf.Add
  fullName: PdfBuilder.Pdf.Add
- uid: PdfBuilder.Builder{{T}}
  commentId: T:PdfBuilder.Builder{``0}
  parent: PdfBuilder
  definition: PdfBuilder.Builder`1
  name: Builder<T>
  nameWithType: Builder<T>
  fullName: PdfBuilder.Builder<T>
  nameWithType.vb: Builder(Of T)
  fullName.vb: PdfBuilder.Builder(Of T)
  name.vb: Builder(Of T)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Interfaces.IPdfRenderer
  commentId: T:PdfBuilder.Interfaces.IPdfRenderer
  parent: PdfBuilder.Interfaces
  isExternal: false
  name: IPdfRenderer
  nameWithType: IPdfRenderer
  fullName: PdfBuilder.Interfaces.IPdfRenderer
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: PdfBuilder.Pdf.Render*
  commentId: Overload:PdfBuilder.Pdf.Render
  isExternal: false
  name: Render
  nameWithType: Pdf.Render
  fullName: PdfBuilder.Pdf.Render
- uid: PdfBuilder.Interfaces
  commentId: N:PdfBuilder.Interfaces
  isExternal: false
  name: PdfBuilder.Interfaces
  nameWithType: PdfBuilder.Interfaces
  fullName: PdfBuilder.Interfaces
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: PdfBuilder.Pdf.Save*
  commentId: Overload:PdfBuilder.Pdf.Save
  isExternal: false
  name: Save
  nameWithType: Pdf.Save
  fullName: PdfBuilder.Pdf.Save
- uid: PdfBuilder.Pdf.RenderHtml*
  commentId: Overload:PdfBuilder.Pdf.RenderHtml
  isExternal: false
  name: RenderHtml
  nameWithType: Pdf.RenderHtml
  fullName: PdfBuilder.Pdf.RenderHtml
- uid: System.Byte
  commentId: T:System.Byte
- uid: PdfBuilder.Pdf.ToArray*
  commentId: Overload:PdfBuilder.Pdf.ToArray
  isExternal: false
  name: ToArray
  nameWithType: Pdf.ToArray
  fullName: PdfBuilder.Pdf.ToArray
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: PdfBuilder.Pdf.Dispose*
  commentId: Overload:PdfBuilder.Pdf.Dispose
  isExternal: false
  name: Dispose
  nameWithType: Pdf.Dispose
  fullName: PdfBuilder.Pdf.Dispose
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
