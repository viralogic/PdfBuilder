### YamlMime:ManagedReference
items:
- uid: PdfBuilder.TableRowBuilder
  commentId: T:PdfBuilder.TableRowBuilder
  id: TableRowBuilder
  parent: PdfBuilder
  children:
  - PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell})
  - PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}})
  langs:
  - csharp
  - vb
  name: TableRowBuilder
  nameWithType: TableRowBuilder
  fullName: PdfBuilder.TableRowBuilder
  type: Class
  source:
    remote:
      path: PdfBuilder/TableRowBuilder.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: TableRowBuilder
    path: TableRowBuilder.cs
    startLine: 12
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nHandles PDF table rows\n"
  example: []
  syntax:
    content: 'public class TableRowBuilder : Builder<PdfPRow>'
    content.vb: >-
      Public Class TableRowBuilder
          Inherits Builder(Of PdfPRow)
  inheritance:
  - System.Object
  - PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  inheritedMembers:
  - PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Instance
  - PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Set(System.Action{iTextSharp.text.pdf.PdfPRow})
  - PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.ReadProperty``1(System.Func{iTextSharp.text.pdf.PdfPRow,{TResult}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}})
  commentId: M:PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}})
  id: '#ctor(System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}})'
  parent: PdfBuilder.TableRowBuilder
  langs:
  - csharp
  - vb
  name: TableRowBuilder(IEnumerable<Builder<PdfPCell>>)
  nameWithType: TableRowBuilder.TableRowBuilder(IEnumerable<Builder<PdfPCell>>)
  fullName: PdfBuilder.TableRowBuilder.TableRowBuilder(System.Collections.Generic.IEnumerable<PdfBuilder.Builder<iTextSharp.text.pdf.PdfPCell>>)
  type: Constructor
  source:
    remote:
      path: PdfBuilder/TableRowBuilder.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: .ctor
    path: TableRowBuilder.cs
    startLine: 19
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nConstructs a PDF table row from a list of PdfPCell builders.\nThe cells appear in the row in the order in which they exist in the list.\n"
  example: []
  syntax:
    content: public TableRowBuilder(IEnumerable<Builder<PdfPCell>> cells)
    parameters:
    - id: cells
      type: System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}}
      description: A list of PdfPCell builders <xref href="System.Collections.Generic.IEnumerable%601" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(cells As IEnumerable(Of Builder(Of PdfPCell)))
  overload: PdfBuilder.TableRowBuilder.#ctor*
  nameWithType.vb: TableRowBuilder.TableRowBuilder(IEnumerable(Of Builder(Of PdfPCell)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PdfBuilder.TableRowBuilder.TableRowBuilder(System.Collections.Generic.IEnumerable(Of PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPCell)))
  name.vb: TableRowBuilder(IEnumerable(Of Builder(Of PdfPCell)))
- uid: PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell})
  commentId: M:PdfBuilder.TableRowBuilder.#ctor(System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell})
  id: '#ctor(System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell})'
  parent: PdfBuilder.TableRowBuilder
  langs:
  - csharp
  - vb
  name: TableRowBuilder(IEnumerable<PdfPCell>)
  nameWithType: TableRowBuilder.TableRowBuilder(IEnumerable<PdfPCell>)
  fullName: PdfBuilder.TableRowBuilder.TableRowBuilder(System.Collections.Generic.IEnumerable<iTextSharp.text.pdf.PdfPCell>)
  type: Constructor
  source:
    remote:
      path: PdfBuilder/TableRowBuilder.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: .ctor
    path: TableRowBuilder.cs
    startLine: 29
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  summary: "\nConstructs a PDF table row from a list of PdfPCells.\nThe cells appear in the row in the order in which they exist in the list.\n"
  example: []
  syntax:
    content: public TableRowBuilder(IEnumerable<PdfPCell> cells)
    parameters:
    - id: cells
      type: System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell}
      description: A list of PdfPCells <xref href="iTextSharp.text.pdf.PdfPCell" data-throw-if-not-resolved="false"></xref>
    content.vb: Public Sub New(cells As IEnumerable(Of PdfPCell))
  overload: PdfBuilder.TableRowBuilder.#ctor*
  nameWithType.vb: TableRowBuilder.TableRowBuilder(IEnumerable(Of PdfPCell))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: PdfBuilder.TableRowBuilder.TableRowBuilder(System.Collections.Generic.IEnumerable(Of iTextSharp.text.pdf.PdfPCell))
  name.vb: TableRowBuilder(IEnumerable(Of PdfPCell))
references:
- uid: PdfBuilder
  commentId: N:PdfBuilder
  isExternal: false
  name: PdfBuilder
  nameWithType: PdfBuilder
  fullName: PdfBuilder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  commentId: T:PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  parent: PdfBuilder
  definition: PdfBuilder.Builder`1
  name: Builder<PdfPRow>
  nameWithType: Builder<PdfPRow>
  fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>
  nameWithType.vb: Builder(Of PdfPRow)
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow)
  name.vb: Builder(Of PdfPRow)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Instance
  commentId: P:PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Instance
  parent: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  definition: PdfBuilder.Builder`1.Instance
  name: Instance
  nameWithType: Builder<PdfPRow>.Instance
  fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>.Instance
  nameWithType.vb: Builder(Of PdfPRow).Instance
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow).Instance
- uid: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Set(System.Action{iTextSharp.text.pdf.PdfPRow})
  commentId: M:PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.Set(System.Action{iTextSharp.text.pdf.PdfPRow})
  parent: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  definition: PdfBuilder.Builder`1.Set(System.Action{`0})
  name: Set(Action<PdfPRow>)
  nameWithType: Builder<PdfPRow>.Set(Action<PdfPRow>)
  fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>.Set(System.Action<iTextSharp.text.pdf.PdfPRow>)
  nameWithType.vb: Builder(Of PdfPRow).Set(Action(Of PdfPRow))
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow).Set(System.Action(Of iTextSharp.text.pdf.PdfPRow))
  name.vb: Set(Action(Of PdfPRow))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder<PdfPRow>.Set
    fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>.Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder(Of PdfPRow).Set
    fullName: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow).Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.ReadProperty``1(System.Func{iTextSharp.text.pdf.PdfPRow,{TResult}})
  commentId: M:PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}.ReadProperty``1(System.Func{iTextSharp.text.pdf.PdfPRow,``0})
  parent: PdfBuilder.Builder{iTextSharp.text.pdf.PdfPRow}
  definition: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  name: ReadProperty<TResult>(Func<PdfPRow, TResult>)
  nameWithType: Builder<PdfPRow>.ReadProperty<TResult>(Func<PdfPRow, TResult>)
  fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>.ReadProperty<TResult>(System.Func<iTextSharp.text.pdf.PdfPRow, TResult>)
  nameWithType.vb: Builder(Of PdfPRow).ReadProperty(Of TResult)(Func(Of PdfPRow, TResult))
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow).ReadProperty(Of TResult)(System.Func(Of iTextSharp.text.pdf.PdfPRow, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of PdfPRow, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<PdfPRow>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<iTextSharp.text.pdf.PdfPRow>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of PdfPRow).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPRow).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.pdf.PdfPRow
    name: PdfPRow
    nameWithType: PdfPRow
    fullName: iTextSharp.text.pdf.PdfPRow
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: PdfBuilder.Builder`1
  commentId: T:PdfBuilder.Builder`1
  parent: PdfBuilder
  isExternal: false
  name: Builder<T>
  nameWithType: Builder<T>
  fullName: PdfBuilder.Builder<T>
  nameWithType.vb: Builder(Of T)
  fullName.vb: PdfBuilder.Builder(Of T)
  name.vb: Builder(Of T)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder`1.Instance
  commentId: P:PdfBuilder.Builder`1.Instance
  isExternal: false
  name: Instance
  nameWithType: Builder<T>.Instance
  fullName: PdfBuilder.Builder<T>.Instance
  nameWithType.vb: Builder(Of T).Instance
  fullName.vb: PdfBuilder.Builder(Of T).Instance
- uid: PdfBuilder.Builder`1.Set(System.Action{`0})
  commentId: M:PdfBuilder.Builder`1.Set(System.Action{`0})
  isExternal: true
  name: Set(Action<T>)
  nameWithType: Builder<T>.Set(Action<T>)
  fullName: PdfBuilder.Builder<T>.Set(System.Action<T>)
  nameWithType.vb: Builder(Of T).Set(Action(Of T))
  fullName.vb: PdfBuilder.Builder(Of T).Set(System.Action(Of T))
  name.vb: Set(Action(Of T))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder<T>.Set
    fullName: PdfBuilder.Builder<T>.Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder(Of T).Set
    fullName: PdfBuilder.Builder(Of T).Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  commentId: M:PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  isExternal: true
  name: ReadProperty<TResult>(Func<T, TResult>)
  nameWithType: Builder<T>.ReadProperty<TResult>(Func<T, TResult>)
  fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>(System.Func<T, TResult>)
  nameWithType.vb: Builder(Of T).ReadProperty(Of TResult)(Func(Of T, TResult))
  fullName.vb: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)(System.Func(Of T, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<T>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of T).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.TableRowBuilder.#ctor*
  commentId: Overload:PdfBuilder.TableRowBuilder.#ctor
  isExternal: false
  name: TableRowBuilder
  nameWithType: TableRowBuilder.TableRowBuilder
  fullName: PdfBuilder.TableRowBuilder.TableRowBuilder
- uid: System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}}
  commentId: T:System.Collections.Generic.IEnumerable{PdfBuilder.Builder{iTextSharp.text.pdf.PdfPCell}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Builder<PdfPCell>>
  nameWithType: IEnumerable<Builder<PdfPCell>>
  fullName: System.Collections.Generic.IEnumerable<PdfBuilder.Builder<iTextSharp.text.pdf.PdfPCell>>
  nameWithType.vb: IEnumerable(Of Builder(Of PdfPCell))
  fullName.vb: System.Collections.Generic.IEnumerable(Of PdfBuilder.Builder(Of iTextSharp.text.pdf.PdfPCell))
  name.vb: IEnumerable(Of Builder(Of PdfPCell))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.pdf.PdfPCell
    name: PdfPCell
    nameWithType: PdfPCell
    fullName: iTextSharp.text.pdf.PdfPCell
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.pdf.PdfPCell
    name: PdfPCell
    nameWithType: PdfPCell
    fullName: iTextSharp.text.pdf.PdfPCell
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: iTextSharp.text.pdf.PdfPCell
  commentId: T:iTextSharp.text.pdf.PdfPCell
- uid: System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell}
  commentId: T:System.Collections.Generic.IEnumerable{iTextSharp.text.pdf.PdfPCell}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PdfPCell>
  nameWithType: IEnumerable<PdfPCell>
  fullName: System.Collections.Generic.IEnumerable<iTextSharp.text.pdf.PdfPCell>
  nameWithType.vb: IEnumerable(Of PdfPCell)
  fullName.vb: System.Collections.Generic.IEnumerable(Of iTextSharp.text.pdf.PdfPCell)
  name.vb: IEnumerable(Of PdfPCell)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.pdf.PdfPCell
    name: PdfPCell
    nameWithType: PdfPCell
    fullName: iTextSharp.text.pdf.PdfPCell
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.pdf.PdfPCell
    name: PdfPCell
    nameWithType: PdfPCell
    fullName: iTextSharp.text.pdf.PdfPCell
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
