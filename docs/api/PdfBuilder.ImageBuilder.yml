### YamlMime:ManagedReference
items:
- uid: PdfBuilder.ImageBuilder
  commentId: T:PdfBuilder.ImageBuilder
  id: ImageBuilder
  parent: PdfBuilder
  children:
  - PdfBuilder.ImageBuilder.#ctor(System.String)
  langs:
  - csharp
  - vb
  name: ImageBuilder
  nameWithType: ImageBuilder
  fullName: PdfBuilder.ImageBuilder
  type: Class
  source:
    remote:
      path: PdfBuilder/ImageBuilder.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: ImageBuilder
    path: ImageBuilder.cs
    startLine: 9
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  syntax:
    content: 'public class ImageBuilder : Builder<Image>'
    content.vb: >-
      Public Class ImageBuilder
          Inherits Builder(Of Image)
  inheritance:
  - System.Object
  - PdfBuilder.Builder{iTextSharp.text.Image}
  inheritedMembers:
  - PdfBuilder.Builder{iTextSharp.text.Image}.Instance
  - PdfBuilder.Builder{iTextSharp.text.Image}.Set(System.Action{iTextSharp.text.Image})
  - PdfBuilder.Builder{iTextSharp.text.Image}.ReadProperty``1(System.Func{iTextSharp.text.Image,{TResult}})
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: PdfBuilder.ImageBuilder.#ctor(System.String)
  commentId: M:PdfBuilder.ImageBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: PdfBuilder.ImageBuilder
  langs:
  - csharp
  - vb
  name: ImageBuilder(String)
  nameWithType: ImageBuilder.ImageBuilder(String)
  fullName: PdfBuilder.ImageBuilder.ImageBuilder(System.String)
  type: Constructor
  source:
    remote:
      path: PdfBuilder/ImageBuilder.cs
      branch: master
      repo: https://github.com/viralogic/PdfBuilder.git
    id: .ctor
    path: ImageBuilder.cs
    startLine: 11
  assemblies:
  - PdfBuilder
  namespace: PdfBuilder
  syntax:
    content: public ImageBuilder(string filePath)
    parameters:
    - id: filePath
      type: System.String
    content.vb: Public Sub New(filePath As String)
  overload: PdfBuilder.ImageBuilder.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: PdfBuilder
  commentId: N:PdfBuilder
  isExternal: false
  name: PdfBuilder
  nameWithType: PdfBuilder
  fullName: PdfBuilder
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: PdfBuilder.Builder{iTextSharp.text.Image}
  commentId: T:PdfBuilder.Builder{iTextSharp.text.Image}
  parent: PdfBuilder
  definition: PdfBuilder.Builder`1
  name: Builder<Image>
  nameWithType: Builder<Image>
  fullName: PdfBuilder.Builder<iTextSharp.text.Image>
  nameWithType.vb: Builder(Of Image)
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Image)
  name.vb: Builder(Of Image)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder{iTextSharp.text.Image}.Instance
  commentId: P:PdfBuilder.Builder{iTextSharp.text.Image}.Instance
  parent: PdfBuilder.Builder{iTextSharp.text.Image}
  definition: PdfBuilder.Builder`1.Instance
  name: Instance
  nameWithType: Builder<Image>.Instance
  fullName: PdfBuilder.Builder<iTextSharp.text.Image>.Instance
  nameWithType.vb: Builder(Of Image).Instance
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Image).Instance
- uid: PdfBuilder.Builder{iTextSharp.text.Image}.Set(System.Action{iTextSharp.text.Image})
  commentId: M:PdfBuilder.Builder{iTextSharp.text.Image}.Set(System.Action{iTextSharp.text.Image})
  parent: PdfBuilder.Builder{iTextSharp.text.Image}
  definition: PdfBuilder.Builder`1.Set(System.Action{`0})
  name: Set(Action<Image>)
  nameWithType: Builder<Image>.Set(Action<Image>)
  fullName: PdfBuilder.Builder<iTextSharp.text.Image>.Set(System.Action<iTextSharp.text.Image>)
  nameWithType.vb: Builder(Of Image).Set(Action(Of Image))
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Image).Set(System.Action(Of iTextSharp.text.Image))
  name.vb: Set(Action(Of Image))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder<Image>.Set
    fullName: PdfBuilder.Builder<iTextSharp.text.Image>.Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder(Of Image).Set
    fullName: PdfBuilder.Builder(Of iTextSharp.text.Image).Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder{iTextSharp.text.Image}.ReadProperty``1(System.Func{iTextSharp.text.Image,{TResult}})
  commentId: M:PdfBuilder.Builder{iTextSharp.text.Image}.ReadProperty``1(System.Func{iTextSharp.text.Image,``0})
  parent: PdfBuilder.Builder{iTextSharp.text.Image}
  definition: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  name: ReadProperty<TResult>(Func<Image, TResult>)
  nameWithType: Builder<Image>.ReadProperty<TResult>(Func<Image, TResult>)
  fullName: PdfBuilder.Builder<iTextSharp.text.Image>.ReadProperty<TResult>(System.Func<iTextSharp.text.Image, TResult>)
  nameWithType.vb: Builder(Of Image).ReadProperty(Of TResult)(Func(Of Image, TResult))
  fullName.vb: PdfBuilder.Builder(Of iTextSharp.text.Image).ReadProperty(Of TResult)(System.Func(Of iTextSharp.text.Image, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of Image, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<Image>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<iTextSharp.text.Image>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of Image).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of iTextSharp.text.Image).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: iTextSharp.text.Image
    name: Image
    nameWithType: Image
    fullName: iTextSharp.text.Image
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: PdfBuilder.Builder`1
  commentId: T:PdfBuilder.Builder`1
  parent: PdfBuilder
  isExternal: false
  name: Builder<T>
  nameWithType: Builder<T>
  fullName: PdfBuilder.Builder<T>
  nameWithType.vb: Builder(Of T)
  fullName.vb: PdfBuilder.Builder(Of T)
  name.vb: Builder(Of T)
  spec.csharp:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: PdfBuilder.Builder`1
    name: Builder
    nameWithType: Builder
    fullName: PdfBuilder.Builder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder`1.Instance
  commentId: P:PdfBuilder.Builder`1.Instance
  isExternal: false
  name: Instance
  nameWithType: Builder<T>.Instance
  fullName: PdfBuilder.Builder<T>.Instance
  nameWithType.vb: Builder(Of T).Instance
  fullName.vb: PdfBuilder.Builder(Of T).Instance
- uid: PdfBuilder.Builder`1.Set(System.Action{`0})
  commentId: M:PdfBuilder.Builder`1.Set(System.Action{`0})
  isExternal: true
  name: Set(Action<T>)
  nameWithType: Builder<T>.Set(Action<T>)
  fullName: PdfBuilder.Builder<T>.Set(System.Action<T>)
  nameWithType.vb: Builder(Of T).Set(Action(Of T))
  fullName.vb: PdfBuilder.Builder(Of T).Set(System.Action(Of T))
  name.vb: Set(Action(Of T))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder<T>.Set
    fullName: PdfBuilder.Builder<T>.Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.Set(System.Action{`0})
    name: Set
    nameWithType: Builder(Of T).Set
    fullName: PdfBuilder.Builder(Of T).Set
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  commentId: M:PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
  isExternal: true
  name: ReadProperty<TResult>(Func<T, TResult>)
  nameWithType: Builder<T>.ReadProperty<TResult>(Func<T, TResult>)
  fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>(System.Func<T, TResult>)
  nameWithType.vb: Builder(Of T).ReadProperty(Of TResult)(Func(Of T, TResult))
  fullName.vb: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)(System.Func(Of T, TResult))
  name.vb: ReadProperty(Of TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty<TResult>
    nameWithType: Builder<T>.ReadProperty<TResult>
    fullName: PdfBuilder.Builder<T>.ReadProperty<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: PdfBuilder.Builder`1.ReadProperty``1(System.Func{`0,``0})
    name: ReadProperty(Of TResult)
    nameWithType: Builder(Of T).ReadProperty(Of TResult)
    fullName: PdfBuilder.Builder(Of T).ReadProperty(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: PdfBuilder.ImageBuilder.#ctor*
  commentId: Overload:PdfBuilder.ImageBuilder.#ctor
  isExternal: false
  name: ImageBuilder
  nameWithType: ImageBuilder.ImageBuilder
  fullName: PdfBuilder.ImageBuilder.ImageBuilder
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
